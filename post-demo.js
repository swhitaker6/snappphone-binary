

var img = [
    // 1 
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
    0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
    0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
    0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
    // 2 
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
    0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
    0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
    0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
    // 3 
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
    0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
    0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
    0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
    // 4 
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
    0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
    0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
    0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
    // 5 
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
    0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
    0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
    0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
    // 6 
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
    0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
    0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
    0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
    // 7 
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
    0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
    0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
    0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
    // 8 
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
    0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
    0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
    0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
    // 9 
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
    0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
    0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
    0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
    // 10 
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
    0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
    0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
    0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
    // 11 
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
    0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
    0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
    0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
    // 12 
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
    0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
    0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
    0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
    // 13 
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
    0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
    0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
    0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
    // 14 
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
    0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
    0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
    0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
    // 15 
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
    0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
    0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
    0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
    // 16 
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
    0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11,
    0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
    0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
  
  ];
  
  
  
  var openFile = function(event) {
    var input = event.target;
  
    var reader = new FileReader();
    reader.onload = function(){
      // freeGenTexture();
      var dataURL = reader.result;
      var output = document.getElementById('image-output');
      output.src = dataURL;
    };
    reader.readAsDataURL(input.files[0]);
  };
  
  
  
    
  const PNG_SIGNATURE = [ 
      
    137, 80, 78, 71, 13, 10, 26, 10, //PNG signature (8 bytes)  
    0, 0, 0, 13,  //IHDR chunk 'length' (4 bytes)
    73, 72, 68, 82 //IHDR chunck 'type' (4 bytes)
    //followed by IHDR chunck 'data' (max 2^31 bytes)
    //terminated by CRC checksum 'Cyclic Redundancy Check' (4 bytes)
  
  ];
  
  
  
  var isPNGImage = function(imageFileBytes) {
  
  
    for( let i = 0; i < PNG_SIGNATURE.length; i++) {
  
      if(imageFileBytes[i] !== PNG_SIGNATURE[i] ) {
  
        return false;
  
      }
  
    }
  
    return true;
  
  } 
  
  
  
  var bytesToUint32 = function(byteArray, start, count) {
  
    //...
  
  }
  
  
  
  
  var setSubLine = function(unfilteredBytes, byteOffset, byteArray, start, length, bytesPerPixel ) {
  
    for (let i = 0; i < length; i++) {
  
      const offset = byteOffset + i - bytesPerPixel;
      const current = byteArray[start + i];
      const pervious = offset >= byteOffset ? unfilteredBytes[offset] : 0;
      unfilteredBytes.push((current + previous) & 0xFF);
  
    }
  
  }
  


  var FILE_GROWTH_MULTIPLE = 3;
  var BYTES_PER_PIXEL = 4;
  var szData;
  var fileBlob;
  var pFile;
  var szFile
  var pBuf;
  var szBuf
  var w;
  var h;
  var pngFileArrayBuf;
  var img2;
  var first_pass = true;
  
  var startGenTexture = function () {
  
    var env = false; // is webGL2.0
    var page = 1;
    
    var texture0;
    var texture1;
    var uniforms;
  
    img2 = document.getElementById("image-output");   // Create new image element
    // var img2 = new Image();   // Create new image element
  
    console.log("clicked generate button 14");
  
    console.log(img2);
  
  
  
    img2.onload = function(event) 
    {
  
      console.log("inside onload() callback");
  
      w = event.target.width;
      h = event.target.height;
      // w = img2.width;
      // h = img2.height;
      var canvas = document.getElementById("canvas");
  
      console.log("got canvas element");
  
      canvas.width = w;
      canvas.height = h;
  
      var canvasCtx = canvas.getContext("2d");
      
      console.log("got 2d context");
  
      canvasCtx.drawImage(img2,0,0);
  
  
      if(first_pass) {
  
        first_pass = false;
  
        var array_reader = new FileReader();
    
        array_reader.onload = function(event) 
        {
    
          // console.log(event.target.result);
          pngFileArrayBuf = event.target.result;
          // console.log(array_reader.result);
          // pngFileArrayBuf = array_reader.result;
    
          var pngFileTypedArray = new Uint8Array(pngFileArrayBuf);
      
          console.log("PNG File Typed Array LENGTH:");
          console.log(pngFileTypedArray.length);
      
          console.log("PNG File Typed Array BYTES_PER_ELEMENT:");
          console.log(pngFileTypedArray.BYTES_PER_ELEMENT);
      
          console.log("PNG File Typed Array DATA:");
          console.log(pngFileTypedArray);
      
          szData = w*h*BYTES_PER_PIXEL;
          szFile = pngFileTypedArray.length*pngFileTypedArray.BYTES_PER_ELEMENT*FILE_GROWTH_MULTIPLE;
          // szBuf = pngFileTypedArray.length*pngFileTypedArray.BYTES_PER_ELEMENT;
    
          console.log("Max module HEAP memory size ="+Module.HEAP8.length);
    
          pData = Module._malloc(szData);
          pFile = Module._malloc(szFile);
          Module.HEAP8.set(pngFileTypedArray, pFile);
          // pBuf = Module._malloc(szBuf);
          // Module.HEAP8.set(pngFileTypedArray, pBuf);
    
          var dataBuffer = new ArrayBuffer(szData);
          // var buffer = new ArrayBuffer(szBuf);
          var pngDataInWasmModuleMemory = new Uint8Array(dataBuffer);
    
          var fileBuffer = new ArrayBuffer(szFile);
          // var buffer = new ArrayBuffer(szBuf);
          var pngFileInWasmModuleMemory = new Uint8Array(fileBuffer);
          for(i=0; i < szFile; i++) {
      
            pngFileInWasmModuleMemory[i] = Module.getValue(pFile+i, 'i8'); 
      
          }
          console.log("File in WASM module memory BEFORE Module.ccall('genTexture') call");
          console.log(pngFileInWasmModuleMemory);
          // console.log(textureArray);
    
    
    
          Module.ccall('genTexture', 'number', ['number', 'number', 'number', 'number', 'number', 'boolean' ], [page, pFile, szFile, w, h, env]);
          // Module.ccall('genTexture', 'number', ['number', 'number', 'number', 'boolean' ], [page, pBuf, szBuf, env]);
          
    
    
          for(i=0; i < szFile; i++) {
      
            pngFileInWasmModuleMemory[i] = Module.getValue(pFile+i, 'i8'); 
      
          }
          console.log("File in Wasm module memory AFTER Module.ccall('genTexture') call");
          console.log(pngFileInWasmModuleMemory);
    
    
          if(true) {
  
            for(i=0; i < szFile; i++) {
      
              pngFileInWasmModuleMemory[i] = Module.getValue(pFile+i, 'i8'); 
        
            }
            console.log("File in WASM module memory BEFORE Module.ccall('genTexture') call");
            console.log(pngFileInWasmModuleMemory);
            // console.log(textureArray);
      
      
      
            Module.ccall('genTexture', 'number', ['number', 'number', 'number', 'number', 'number', 'boolean' ], [page, pFile, szFile, w, h, env]);
            // Module.ccall('genTexture', 'number', ['number', 'number', 'number', 'boolean' ], [page, pBuf, szBuf, env]);
            
      
      
            for(i=0; i < szFile; i++) {
        
              pngFileInWasmModuleMemory[i] = Module.getValue(pFile+i, 'i8'); 
        
            }
            console.log("File in Wasm module memory AFTER Module.ccall('genTexture') call");
            console.log(pngFileInWasmModuleMemory);
  
          }
  
  
    
          fileBlob = new Blob([pngFileInWasmModuleMemory]);
    
          var url_reader = new FileReader();
      
          url_reader.onload = function(event) 
          {
      
            var dataURL = event.target.result;
            // var dataURL = url_reader.result;
            img2.src = dataURL;  
      
          }
      
          url_reader.readAsDataURL(fileBlob);      
  
        }
  
        array_reader.readAsArrayBuffer(fileBlob);
  
      }
  
    }
  
  
  
  
    fetch('images/photo-solid.png').then(function(response) 
    {
        if(response.ok) {
          console.log("GOT RESPONSE");
          return response.blob();
        }
        throw new Error("Network response was not ok.");
  
    }).then(function(pngFileBlob) 
    {
    
      fileBlob = pngFileBlob;
  
      var url_reader = new FileReader();
  
      url_reader.onload = function(event) 
      {
  
        var dataURL = event.target.result;
        // var dataURL = url_reader.result;
        img2.src = dataURL;  
  
      }
  
      url_reader.readAsDataURL(fileBlob);
  
  
    }).catch(function(error) 
    {
  
      console.log('There has been a problem with your fetch operation: ', error.message);
  
    });
  
  
  
  };
  
  
  


var dumpMemory = function () {

    var sz = 64;
    var buffer = new ArrayBuffer(sz);
    var textureArray = new Uint8Array(buffer);

    for(i=0; i < sz; i++) {

        textureArray[i] = Module.getValue(pBuf+i, 'i8'); 

    }

    console.log("Memory contents after Module.ccall('genTexture') call");
    console.log(textureArray);


};



var showCypher = function () {


    var canvas = document.getElementById("canvas");
  
    w  = canvas.width;
    h = canvas.height;
  
    var canvasCtx = canvas.getContext("2d");
  
    var textureImage = canvasCtx.createImageData(w, h);
    var len = w*h*4;
  
    var buffer = new ArrayBuffer(len);
    var textureArray = new Uint8Array(buffer);
  
  
  
    for(i=0; i < len; i+=4) {
  
        textureImage.data[i+0] = Module.getValue(pBuf+i+0, 'i8'); 
        textureImage.data[i+1] = Module.getValue(pBuf+i+1, 'i8'); 
        textureImage.data[i+2] = Module.getValue(pBuf+i+2, 'i8'); 
        textureImage.data[i+3] = 255;  
  
    }
  
  
    for(i=0; i < len; i++) {
  
      textureArray[i] = Module.getValue(pBuf+i, 'i8'); 
  
    }
  
  
    console.log("Sent cypher data to canvas element w/ alpha modified for display");
  
    canvasCtx.putImageData(textureImage, 0, 0);
  
    console.log("...current cypher data in canvas element");
  
    var imageDataObject = canvasCtx.getImageData(0,0,w,h);
  
    console.log(imageDataObject);
  
    console.log(imageDataObject.data);
  
    console.log("...original cypher data in wasm module");
  
    console.log(textureArray);
  
  
  };
  
  
  
  
  
  var isCypher = true;
  
var doGenTexture = function () {

    var page = 1;
    var env = false; //is Webgl2 = false 

    // var buffer = new ArrayBuffer(64);
    var buffer = new ArrayBuffer(szBuf);
    var pngFileInWasmModuleMemory = new Uint8Array(buffer);

   
    var sz = pngFileInWasmModuleMemory.length*pngFileInWasmModuleMemory.BYTES_PER_ELEMENT;
    // var pBuf = Module._malloc(sz);
    // Module.HEAP8.set(imgTypedArray, pBuf);
    // Module.HEAP8.writeArrayToMemory(imgTypedArray, buf);
    Module.ccall('genTexture', 'number', ['number', 'number', 'number', 'number', 'number', 'boolean' ], [page, pFile, szFile, w, h, env]);
    // Module.ccall('genTexture', 'number', ['number', 'number', 'number', 'boolean' ], [page, pBuf, szBuf, env]);
    // Module.ccall('genTexture', 'number', ['number', 'number', 'number' ], [page, pBuf, sz]);
    for(i=0; i < sz; i++) {

      pngFileInWasmModuleMemory[i] = Module.getValue(pBuf+i, 'i8');

    }

    if(isCypher) {

      isCypher = false;

    } else {

      isCypher = true;

    }
 
    showCypher();

    console.log(pngFileInWasmModuleMemory);
    //  Module._free(pBuf);

};







var freeGenTexture = function () {

    var page = 1; 

     Module._free(pBuf);
     console.log("Wasm module memory freed");

};




var doBinaryRunTest = function () {



    console.log("inside doBinaryRunTest() function");


        pngFileArrayBuf = img; //event.target.result;

  
        var pngFileTypedArray = new Uint8Array(pngFileArrayBuf);
    
        console.log("PNG File Typed Array LENGTH:");
        console.log(pngFileTypedArray.length);

        var w = pngFileTypedArray.length;
        var h = 1;
    
        console.log("PNG File Typed Array BYTES_PER_ELEMENT:");
        console.log(pngFileTypedArray.BYTES_PER_ELEMENT);
    
        console.log("PNG File Typed Array DATA:");
        console.log(pngFileTypedArray);
    

        szFile = pngFileTypedArray.length*pngFileTypedArray.BYTES_PER_ELEMENT;

  
        console.log("Max module HEAP memory size ="+Module.HEAP8.length);
  
        console.log("about to call Module._malloc(...)...");

        pFile = Module._malloc(szFile);

        console.log("Module._malloc returned pointer -> pFile = ", pFile);

        console.log("about to call Module.HEAP8.set(...)...")
        Module.HEAP8.set(pngFileTypedArray, pFile);

  
        var fileBuffer = new ArrayBuffer(szFile);

        console.log("about to call Module.getValue(...) repeatedly to retreive data set by previous call")
        var pngFileInWasmModuleMemory = new Uint8Array(fileBuffer);
        for(i=0; i < szFile; i++) {
    
          pngFileInWasmModuleMemory[i] = Module.getValue(pFile+i, 'i8'); 
    
        }
        console.log("Data in WASM module memory retreived by Module.getValue(...) calls");
        console.log(pngFileInWasmModuleMemory);

        console.log("about to call Module._free(...) on pFile pointer");
        Module._free(pFile);
        pFile = 0;
        console.log("finished call to Module._free(...) on pFile -> pointer = ", pFile);



}


// doBinaryRunTest();

// var genTexture = Module.cwrap('genTexture', 'number', [ 'nunber', 'number' ], [ 'page', 'buf' ]);
    


